(window.webpackJsonp=window.webpackJsonp||[]).push([[132],{184:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"design-hashmap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#design-hashmap","aria-hidden":"true"}},[t._v("#")]),t._v(" Design HashMap")]),t._v(" "),s("p",[t._v("Design a HashMap without using any built-in hash table libraries.")]),t._v(" "),s("p",[t._v("To be specific, your design should include these functions:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("put(key, value)")]),t._v(": Insert a (key, value) pair into the HashMap. If the value already exists in the HashMap, update the value.")]),t._v(" "),s("li",[s("code",[t._v("get(key)")]),t._v(": Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.")]),t._v(" "),s("li",[s("code",[t._v("remove(key)")]),t._v(": Remove the mapping for the value key if this map contains the mapping for the key.")])]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("MyHashMap hashMap = new MyHashMap();\nhashMap.put(1, 1);\nhashMap.put(2, 2);\nhashMap.get(1);            // returns 1\nhashMap.get(3);            // returns -1 (not found)\nhashMap.put(2, 1);          // update the existing value\nhashMap.get(2);            // returns 1\nhashMap.remove(2);          // remove the mapping for 2\nhashMap.get(2);            // returns -1 (not found)\n")])])]),s("p",[s("strong",[t._v("Note:")])]),t._v(" "),s("ul",[s("li",[t._v("All keys and values will be in the range of "),s("code",[t._v("[0, 1000000]")]),t._v(".")]),t._v(" "),s("li",[t._v("The number of operations will be in the range of "),s("code",[t._v("[1, 10000]")]),t._v(".")]),t._v(" "),s("li",[t._v("Please do not use the built-in HashMap library.")])]),t._v(" "),s("h2",{attrs:{id:"javascript"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript","aria-hidden":"true"}},[t._v("#")]),t._v(" JavaScript")]),t._v(" "),s("div",{staticClass:"language-JavaScript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token comment"}},[t._v("/**\n * Initialize your data structure here.\n */")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{attrs:{class:"token function-variable function"}},[t._v("MyHashMap")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{attrs:{class:"token keyword"}},[t._v("this")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("/**\n * value will always be non-negative.\n * @param {number} key\n * @param {number} value\n * @return {void}\n */")]),t._v("\nMyHashMap"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function-variable function"}},[t._v("put")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{attrs:{class:"token keyword"}},[t._v("this")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" value\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("/**\n * Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key\n * @param {number} key\n * @return {number}\n */")]),t._v("\nMyHashMap"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function-variable function"}},[t._v("get")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" key "),s("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("this")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data "),s("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("this")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("/**\n * Removes the mapping of the specified value key if this map contains a mapping for the key\n * @param {number} key\n * @return {void}\n */")]),t._v("\nMyHashMap"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function-variable function"}},[t._v("remove")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("this")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("/**\n * Your MyHashMap object will be instantiated and called as such:\n * var obj = Object.create(MyHashMap).createNew()\n * obj.put(key,value)\n * var param_2 = obj.get(key)\n * obj.remove(key)\n */")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"python"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#python","aria-hidden":"true"}},[t._v("#")]),t._v(" Python")]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("MyHashMap")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("__init__")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n        Initialize your data structure here.\n        """')]),t._v("\n        self"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("put")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n        value will always be non-negative.\n        :type key: int\n        :type value: int\n        :rtype: void\n        """')]),t._v("\n        self"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" value\n\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("get")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key\n        :type key: int\n        :rtype: int\n        """')]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" self"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("remove")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n        Removes the mapping of the specified value key if this map contains a mapping for the key\n        :type key: int\n        :rtype: void\n        """')]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" key "),s("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" self"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),s("span",{attrs:{class:"token keyword"}},[t._v("del")]),t._v(" self"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("# Your MyHashMap object will be instantiated and called as such:")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("# obj = MyHashMap()")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("# obj.put(key,value)")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("# param_2 = obj.get(key)")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("# obj.remove(key)")]),t._v("\n\n")])])])])}],!1,null,null,null);e.options.__file="README.md";a.default=e.exports}}]);