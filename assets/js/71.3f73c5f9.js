(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{304:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"partition-list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#partition-list","aria-hidden":"true"}},[t._v("#")]),t._v(" Partition List")]),t._v(" "),s("p",[t._v("Given a linked list and a value "),s("em",[t._v("x")]),t._v(", partition it such that all nodes less than "),s("em",[t._v("x")]),t._v(" come before nodes greater than or equal to "),s("em",[t._v("x")]),t._v(".")]),t._v(" "),s("p",[t._v("You should preserve the original relative order of the nodes in each of the two partitions.")]),t._v(" "),s("p",[t._v("For example,")]),t._v(" "),s("p",[t._v("Given "),s("code",[t._v("1->4->3->2->5->2")]),t._v(" and "),s("em",[t._v("x")]),t._v(" = 3,")]),t._v(" "),s("p",[t._v("return "),s("code",[t._v("1->2->2->4->3->5")]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"javascript"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript","aria-hidden":"true"}},[t._v("#")]),t._v(" JavaScript")]),t._v(" "),s("div",{staticClass:"language-JavaScript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token comment"}},[t._v("/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("/**\n * @param {ListNode} head\n * @param {number} x\n * @return {ListNode}\n */")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{attrs:{class:"token function-variable function"}},[t._v("partition")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ltHead "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("ListNode")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" geHead "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("ListNode")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" lt "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ltHead\n  "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ge "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" geHead\n\n  "),s("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" x"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      lt"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" head\n      lt "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" lt"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      ge"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" head\n      ge "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ge"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    head "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next\n  "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  ge"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  lt"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" geHead"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next\n  "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ltHead"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"python"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#python","aria-hidden":"true"}},[t._v("#")]),t._v(" Python")]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{attrs:{class:"token comment"}},[t._v("# Definition for singly-linked list.")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("# class ListNode(object):")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("#     def __init__(self, x):")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("#         self.val = x")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("#         self.next = None")]),t._v("\n\n\n"),s("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Solution")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token builtin"}},[t._v("object")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("partition")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" head"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        """')]),t._v("\n        lt "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ltHead "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ListNode"),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token boolean"}},[t._v("None")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        ge "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" geHead "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ListNode"),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token boolean"}},[t._v("None")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" head"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),s("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" head"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" x"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                lt"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" head\n                lt "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" lt"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n            "),s("span",{attrs:{class:"token keyword"}},[t._v("else")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                ge"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" head\n                ge "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ge"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n            head "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n\n        ge"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token boolean"}},[t._v("None")]),t._v("\n        lt"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" geHead"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ltHead"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n\n")])])])])}],!1,null,null,null);e.options.__file="README.md";a.default=e.exports}}]);