(window.webpackJsonp=window.webpackJsonp||[]).push([[151],{201:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"middle-of-the-linked-list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#middle-of-the-linked-list","aria-hidden":"true"}},[t._v("#")]),t._v(" Middle of the Linked List")]),t._v(" "),a("p",[t._v("Given a non-empty, singly linked list with head node "),a("code",[t._v("head")]),t._v(", return a middle node of linked list.")]),t._v(" "),a("p",[t._v("If there are two middle nodes, return the second middle node.")]),t._v(" "),a("p",[a("strong",[t._v("Example 1:")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Input: [1,2,3,4,5]\nOutput: Node 3 from this list (Serialization: [3,4,5])\nThe returned node has value 3.  (The judge's serialization of this node is [3,4,5]).\nNote that we returned a ListNode object ans, such that:\nans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = NULL.\n")])])]),a("p",[a("strong",[t._v("Example 2:")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Input: [1,2,3,4,5,6]\nOutput: Node 4 from this list (Serialization: [4,5,6])\nSince the list has two middle nodes with values 3 and 4, we return the second one.\n")])])]),a("p",[a("strong",[t._v("Note:")])]),t._v(" "),a("ul",[a("li",[t._v("The number of nodes in the given list will be between "),a("code",[t._v("1")]),t._v(" and "),a("code",[t._v("100")]),t._v(".")])]),t._v(" "),a("h2",{attrs:{id:"javascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript","aria-hidden":"true"}},[t._v("#")]),t._v(" JavaScript")]),t._v(" "),a("div",{staticClass:"language-JavaScript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("/**\n * @param {ListNode} head\n * @return {ListNode}\n */")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{attrs:{class:"token function-variable function"}},[t._v("middleNode")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" fast "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" head\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" slow "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" head\n\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fast "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" fast"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    fast "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" fast"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next\n    slow "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" slow"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" slow\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"python"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python","aria-hidden":"true"}},[t._v("#")]),t._v(" Python")]),t._v(" "),a("div",{staticClass:"language-Python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("# Definition for singly-linked list.")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("# class ListNode:")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("#     def __init__(self, x):")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("#         self.val = x")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("#         self.next = None")]),t._v("\n\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Solution")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("middleNode")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" head"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n        :type head: ListNode\n        :rtype: ListNode\n        """')]),t._v("\n        fast "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" slow "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" head\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" fast "),a("span",{attrs:{class:"token operator"}},[t._v("and")]),t._v(" fast"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token builtin"}},[t._v("next")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            fast "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" fast"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token builtin"}},[t._v("next")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n            slow "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" slow"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" slow\n\n")])])])])}],!1,null,null,null);e.options.__file="README.md";s.default=e.exports}}]);