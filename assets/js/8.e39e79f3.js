(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{205:function(t,s,a){"use strict";a.r(s);var n=a(0),o=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"add-two-numbers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-two-numbers","aria-hidden":"true"}},[t._v("#")]),t._v(" Add Two Numbers")]),t._v(" "),a("p",[t._v("You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.")]),t._v(" "),a("p",[a("strong",[t._v("Input:")]),t._v(" "),a("code",[t._v("(2 -> 4 -> 3) + (5 -> 6 -> 4)")])]),t._v(" "),a("p",[a("strong",[t._v("Output:")]),t._v(" "),a("code",[t._v("7 -> 0 -> 8")])]),t._v(" "),a("h2",{attrs:{id:"go"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go","aria-hidden":"true"}},[t._v("#")]),t._v(" Go")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("type")]),t._v(" ListNode "),a("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tVal  "),a("span",{attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n\tNext "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("ListNode\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("addTwoNumbers")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l1 "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("ListNode"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l2 "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("ListNode"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("ListNode "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tcarry "),a("span",{attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("\n\thead "),a("span",{attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("ListNode"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tcurrent "),a("span",{attrs:{class:"token operator"}},[t._v(":=")]),t._v(" head\n\n\t"),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" l1 "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" l2 "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tsum "),a("span",{attrs:{class:"token operator"}},[t._v(":=")]),t._v(" carry\n\n\t\t"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" l1 "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tsum "),a("span",{attrs:{class:"token operator"}},[t._v("+=")]),t._v(" l1"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Val\n\t\t\tl1 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" l1"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Next\n\t\t"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t\t"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" l2 "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tsum "),a("span",{attrs:{class:"token operator"}},[t._v("+=")]),t._v(" l2"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Val\n\t\t\tl2 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" l2"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Next\n\t\t"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t\tcarry "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" sum "),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("10")]),t._v("\n\t\tcurrent"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Next "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("ListNode"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Val"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" sum "),a("span",{attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("10")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\tcurrent "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" current"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Next\n\t"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" carry "),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tcurrent"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Next "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("ListNode"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Val"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" carry"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" head"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Next\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"javascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript","aria-hidden":"true"}},[t._v("#")]),t._v(" JavaScript")]),t._v(" "),a("div",{staticClass:"language-JavaScript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{attrs:{class:"token function-variable function"}},[t._v("addTwoNumbers")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l1"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l2"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" carry "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" head\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" current\n  head "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" current "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("ListNode")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l1 "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" l2"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" sum "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" carry\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l1"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      sum "),a("span",{attrs:{class:"token operator"}},[t._v("+=")]),t._v(" l1"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val\n      l1 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" l1"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l2"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      sum "),a("span",{attrs:{class:"token operator"}},[t._v("+=")]),t._v(" l2"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val\n      l2 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" l2"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    carry "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sum "),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("10")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("\n    current"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("ListNode")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sum "),a("span",{attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("10")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    current "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" current"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("carry"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    current"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("ListNode")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("carry"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" head"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"python"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python","aria-hidden":"true"}},[t._v("#")]),t._v(" Python")]),t._v(" "),a("div",{staticClass:"language-Python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("# Definition for singly-linked list.")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("# class ListNode(object):")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("#     def __init__(self, x):")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("#         self.val = x")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("#         self.next = None")]),t._v("\n\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Solution")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token builtin"}},[t._v("object")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("addTwoNumbers")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l1"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l2"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        """')]),t._v("\n        head "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" current "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ListNode"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token boolean"}},[t._v("None")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        carry "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" l1 "),a("span",{attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("None")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("or")]),t._v(" l2 "),a("span",{attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("None")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{attrs:{class:"token builtin"}},[t._v("sum")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" carry\n\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" l1 "),a("span",{attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("None")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),a("span",{attrs:{class:"token builtin"}},[t._v("sum")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+=")]),t._v(" l1"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val\n                l1 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" l1"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" l2 "),a("span",{attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("None")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),a("span",{attrs:{class:"token builtin"}},[t._v("sum")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+=")]),t._v(" l2"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val\n                l2 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" l2"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n\n            carry "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("sum")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("//")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("10")]),t._v("\n            current"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ListNode"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token builtin"}},[t._v("sum")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("10")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            current "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" current"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" carry"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            current"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ListNode"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("carry"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" head"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n\n")])])])])}],!1,null,null,null);o.options.__file="README.md";s.default=o.exports}}]);